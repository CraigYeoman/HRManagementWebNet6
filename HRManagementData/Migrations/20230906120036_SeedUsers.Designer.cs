// <auto-generated />
using System;
using HRManagementData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRManagementData.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230906120036_SeedUsers")]
    partial class SeedUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HRManagementData.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "408aa945-3d84-4421-8342-7269ec64d949",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ab0bfc5-c89f-44ab-929c-9a83900ab871",
                            DateJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "System",
                            Lastname = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELrjRHUfWWjaGjM7AToqJIFXq2fK2/M4oAcYcw/h3ExhOpYMkzlV/ESjFKxeAUCjaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b07f96d8-7490-4d34-986c-1f79188ea476",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "3f4631bd-f907-4409-b416-ba356312e659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e50e52e3-9271-4232-b9e9-294c74382235",
                            DateJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "John",
                            Lastname = "Connor",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@LOCALHOST.COM",
                            NormalizedUserName = "USER1@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHoZgbM4ZDVnoP5pTOLuG6PXyy+CYL89np1wTP1Pzr88x+8FdjYxvjlLOGFltKLcBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fd3779a-04d1-4237-859a-4d100fe07930",
                            TwoFactorEnabled = false,
                            UserName = "user1@localhost.com"
                        },
                        new
                        {
                            Id = "3f4631bd-f907-4410-b416-ba356312e659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06443e79-3326-4fe8-8eb8-322d25d6cd59",
                            DateJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "Sarah",
                            Lastname = "Connor",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@LOCALHOST.COM",
                            NormalizedUserName = "USER2@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECVwGiqyaFGXiNUArcTv8Zwzibc+Yysi2O0CvyVajVXxD2ovEGWIXtfFDyyI4WyrBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75326711-4801-485a-8cb8-6d094ef03103",
                            TwoFactorEnabled = false,
                            UserName = "user2@localhost.com"
                        },
                        new
                        {
                            Id = "3f4631bd-f907-4411-b416-ba356312e659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93a02d35-c4c6-4607-8333-b58eaeebb8fc",
                            DateJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "Niki",
                            Lastname = "Lauda",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@LOCALHOST.COM",
                            NormalizedUserName = "USER3@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE868heAJ5lcPADU93ynPFgd22XfzrDBn0IysEtWZU2oBEgaSRqlrAgX6mCAZvh6fA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f51f2e8a-ea06-423e-bb74-29629884ee59",
                            TwoFactorEnabled = false,
                            UserName = "user3@localhost.com"
                        },
                        new
                        {
                            Id = "3f4631bd-f907-4412-b416-ba356312e659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03335653-3438-4d63-8549-811fce02de66",
                            DateJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "James",
                            Lastname = "Hunt",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@LOCALHOST.COM",
                            NormalizedUserName = "USER4@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBmYBRFos50qlGmEDytkjz2ZNSbPZvKHG2JJHCg/r2YW83LNlhdzsGFXm8GY29LJvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7daffdc8-0e19-44d5-aefb-72c08e0b409d",
                            TwoFactorEnabled = false,
                            UserName = "user4@localhost.com"
                        },
                        new
                        {
                            Id = "3f4631bd-f907-4413-b416-ba356312e659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd971a83-6333-46c8-be61-b24527252d63",
                            DateJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "Mario",
                            Lastname = "Andretti",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@LOCALHOST.COM",
                            NormalizedUserName = "USER5@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHbwmg00almsZvZNjJXZ5/ptx+TYaGJ+xjvfF43JD8ILB2dKnd4RvMnkPC528+8/yQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79a17183-140b-45de-aa82-353dcbe724ea",
                            TwoFactorEnabled = false,
                            UserName = "user5@localhost.com"
                        },
                        new
                        {
                            Id = "3f4631bd-f907-4414-b416-ba356312e659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77a9fcb1-060a-4bbf-8b05-3c7759de9dc0",
                            DateJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user6@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "Scott",
                            Lastname = "Bloomquist",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@LOCALHOST.COM",
                            NormalizedUserName = "USER6@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED1uXmhpm3lMYGfGsUVMfmtuS+cpiPPGc2a3HSEV/2ZEy5MZ4MVUi+1R7hfIn8Vi2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a080d58-2c02-4f09-add2-103791632a04",
                            TwoFactorEnabled = false,
                            UserName = "use6r@localhost.com"
                        },
                        new
                        {
                            Id = "3f4631bd-f907-4415-b416-ba356312e659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e23a9f8b-7529-44e2-bf71-3fcaa3b50b66",
                            DateJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user7@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "John",
                            Lastname = "Force",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@LOCALHOST.COM",
                            NormalizedUserName = "USER7@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPS10A7eol7+f3XMX2NJoZPjcmxFV0UW9ZkUdrj1mfOPDiJO85KXRifBiTfmn0lN8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34f6b24f-7b4e-4a93-8952-24cd1275e939",
                            TwoFactorEnabled = false,
                            UserName = "user7@localhost.com"
                        },
                        new
                        {
                            Id = "3f4631bd-f907-4416-b416-ba356312e659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "757d46db-6a0e-42d8-9cf7-1155f1108426",
                            DateJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user8@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "Don",
                            Lastname = "Prudhomme",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@LOCALHOST.COM",
                            NormalizedUserName = "USER8@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENCaLm2HcQKMShN10fWZrVR9EF1CjD/r6HveTdsZd25hP9sEjMOqHZKFs9sJ3JBhGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94bcf989-6988-4c1d-8cfd-459a80ff09d4",
                            TwoFactorEnabled = false,
                            UserName = "user8@localhost.com"
                        },
                        new
                        {
                            Id = "3f4631bd-f907-4417-b416-ba356312e659",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1dab6789-5a90-4a86-b8af-82499ed7e26a",
                            DateJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateofBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user9@localhost.com",
                            EmailConfirmed = true,
                            Firstname = "Tom",
                            Lastname = "McEwen",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@LOCALHOST.COM",
                            NormalizedUserName = "USER9@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5nSNJ0al3kIZOLvA+IOAgxyCtxPIYchgtd/Bpd4D/rXieo4cP4rReeBY6m93fOtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ff79d98-5b11-42c9-8316-a94e1e0eb625",
                            TwoFactorEnabled = false,
                            UserName = "user9@localhost.com"
                        });
                });

            modelBuilder.Entity("HRManagementData.LeaveAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("NumberofDays")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("LeaveAllocations");
                });

            modelBuilder.Entity("HRManagementData.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RequestComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestingEmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("HRManagementData.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefaultDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            ConcurrencyStamp = "cbd889bf-0e49-42f4-a6c7-5a5322c61dc3",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "cac43a7e-f7cb-4148-baaf-1acb431eabbf",
                            ConcurrencyStamp = "95fc2031-a9f1-421e-b0d3-5d0ceb93e8a4",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "408aa945-3d84-4421-8342-7269ec64d949",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        },
                        new
                        {
                            UserId = "3f4631bd-f907-4409-b416-ba356312e659",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1acb431eabbf"
                        },
                        new
                        {
                            UserId = "3f4631bd-f907-4410-b416-ba356312e659",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1acb431eabbf"
                        },
                        new
                        {
                            UserId = "3f4631bd-f907-4411-b416-ba356312e659",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1acb431eabbf"
                        },
                        new
                        {
                            UserId = "3f4631bd-f907-4412-b416-ba356312e659",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1acb431eabbf"
                        },
                        new
                        {
                            UserId = "3f4631bd-f907-4413-b416-ba356312e659",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1acb431eabbf"
                        },
                        new
                        {
                            UserId = "3f4631bd-f907-4414-b416-ba356312e659",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1acb431eabbf"
                        },
                        new
                        {
                            UserId = "3f4631bd-f907-4415-b416-ba356312e659",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1acb431eabbf"
                        },
                        new
                        {
                            UserId = "3f4631bd-f907-4416-b416-ba356312e659",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1acb431eabbf"
                        },
                        new
                        {
                            UserId = "3f4631bd-f907-4417-b416-ba356312e659",
                            RoleId = "cac43a7e-f7cb-4148-baaf-1acb431eabbf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HRManagementData.LeaveAllocation", b =>
                {
                    b.HasOne("HRManagementData.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("HRManagementData.LeaveRequest", b =>
                {
                    b.HasOne("HRManagementData.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HRManagementData.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HRManagementData.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRManagementData.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HRManagementData.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
